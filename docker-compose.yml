version: "3"
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.build
    container_name: elprom-front
    restart: "unless-stopped"
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
    volumes:
      - /frontend/node_modules
      - ./frontend/src:/user/src/app/src
    #stdin_open: true
    #tty: true
    env_file:
      - .env
    networks:
      - el-prom-network
      
  postgres:
    image: postgres:15.3
    container_name: postgres
    restart: "no"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - el-prom-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: "no"
    networks:
      - el-prom-network
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    #ports:
    #  - 8080:80
    depends_on:
      - postgres
    volumes:
      - ./pgadmin4/servers.json:/pgadmin4/servers.json
    
  redis:
    image: redis:7-alpine
    container_name: redis_elprom
    restart: "always"
    networks:
      - el-prom-network

  nestjs-api:
    build:
      context: ./backend
    container_name: nestjs-api
    restart: "always"
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      TTL: ${TTL}
    depends_on:
      - postgres
    volumes:
      - /backend/node_modules
      - ./backend/src:/user/src/api/src
    networks:
      - el-prom-network

  nginx:
    image: nginx:stable-alpine
    container_name: elprom_nginx
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf.dev:/etc/nginx/conf.d/nginx.conf
    depends_on:
      - frontend
      - nestjs-api
      - pgadmin
    networks:
      - el-prom-network

networks:
  el-prom-network:
    driver: bridge

volumes:
  postgres_data:
